var options = {method: 'rejection', samples: 5000}

var observedData = [
  //{person:'bob', outcome: 'success', task : 3/6},
  //{person:'bob', outcome: 'success', task : 3/6},
  {person:'bob', outcome: 'success', task : 3/6}
]

// fit the parameters
var focusPrior = 0.5; 
var focusSkills = 0.8; //if skills<difficulty then success

var model = function() {
  
  var prior = function(task){
    return (task==1/6) ? Beta({a:1.1350203,b:4.9493296}) : (task==3/6 ? Beta({a:5.300114,b:3.772161}):Beta({a:18.327339,b:1.016413}))
  } 
       
  var skills = mem(function(person){
    return uniform(0,1)
  })
  
  var focus = function(person){ //is the person focused?
    return flip(focusPrior)
  }
  
  var throwing = function(person) {
    return focus(person) ? focusSkills*skills(person) :  skills(person)
  }

  var outcome = function(person, task){
    var taskDifficulty = sample(prior(task))
    return throwing(person) <= taskDifficulty ? 'success' : 'fail'
  }
  var obsFn = function(datum){
    condition(outcome(datum.person, datum.task)==datum.outcome) //=datum.success
  }
  
  mapData({data: observedData}, obsFn)

  //return skills('bob')
  return outcome('bob', 1/6)
  
}

var posterior = Infer(options, model)
print("Bob's skills, given that he succeeds on a 50% task")

print("Expected value = " + expectation(posterior))
viz(posterior, {bounds: [0,1]}) //viz.density
