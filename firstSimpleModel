var options = {method: 'rejection', samples: 1000}

var observedData = [
  {person:'bob', outcome: 'fail', task : 0.2},
  {person:'bob', outcome: 'fail', task : 0.2}
]

//{person:'bob', success: 1, task : 0.2}]
//  {person:'bob', success: 1, task : 0.9}, {person:'bob', success: 1, task : 0.1},
 // {person:'bob', success: 1, task : 0.1}, {person:'bob', success: 1, task : 0.1}]

// fit the parameters
var focusPrior = 0.6; 
var lowFocusSkills = 0.5; 

//var luckPrior = 0.3; // 
//var luckSkills = .7; //Can skills be more than one?

//add task Difficulty
// scatter plot once the data is there

var model = function() {

  var skills = mem(function(person){
    return gaussian(0,1)
  })
  
  var focus = function(person){ //is the person focused?
    return flip(focusPrior)
  }
  
//  var lucky = function(person){ //is the person focused?
 //   return flip(luckPrior)
  //}
  
  var throwing = function(person) {
    return focus(person) ? skills(person) : lowFocusSkills * skills(person)
  }

  var outcome = function(person, taskDifficulty){
    throwing(person) >= taskDifficulty ? 'success' : 'fail'
  }
  
  var obsFn = function(datum){
    condition(outcome(datum.person, datum.task)==datum.outcome) //=datum.success
  }

  mapData({data: observedData}, obsFn)

  //condition(success("bob", 0.5)) //mapData instead
  
  //return skills("bob")
  return outcome("bob", 0.1)
}

var posterior = Infer(options, model)
print("Bob's skills, given that he succeeds on a 50% task")

print("Expected value = " + expectation(posterior))
viz(posterior)
