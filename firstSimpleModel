var options = {method: 'rejection', samples: 1000}

var observedData = [
  {person:'bob', success: 0, task : 0.1}, {person:'bob', success: 1, task : 0.5},
  {person:'bob', success: 0, task : 0.5}, {person:'bob', success: 0, task : 0.5}]

// fit the parameters
var focusPrior = 0.6; 
var lowFocusSkills = 0.5; 

var luckPrior = 0.3; // 
var luckSkills = 1.2; //Can skills be more than one?

//add task Difficulty
// scatter plot once the data is there

var model = function() {

  var skills = mem(function(person){
    return uniform(0, 1)
  })
  var focus = function(person){ //is the person focused?
    return flip(focusPrior)
  }
  var lucky = function(person){ //is the person focused?
    return flip(luckPrior)
  }
  var throwing = function(person) {
    return focus(person) ? (lucky ? skills(person)*luckSkills : skills(person)) : 
      (lucky ? skills(person)*lowFocusSkills*luckSkills : skills(person)*lowFocusSkills)
  }

  var success = function(person, taskDifficulty){
    throwing(person) >= taskDifficulty ? 1 : 0
  }
  
  
  var obsFn = function(datum){
    condition(success(datum.person, datum.task)==datum.success) //=datum.success
  }

  mapData({data: observedData}, obsFn)

  //condition(success("bob", 0.5)) //mapData instead
  
  //return skills("bob")
  return success("bob", 0.5)
}

var posterior = Infer(options, model)
print("Bob's skills, given that he succeeds on a 50% task")

print("Expected value = " + expectation(posterior))
viz(posterior)
